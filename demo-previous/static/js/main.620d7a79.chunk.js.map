{"version":3,"sources":["components/Tile.js","components/TileGroup.js","pages/Homepage.js","slugify.js","pages/Event.js","pages/SignIn.js","pages/SignUp.js","pages/Group.js","pages/About.js","components/Header.js","App.js","serviceWorker.js","index.js"],"names":["Tile","title","date","imgSrc","toUrl","eventId","to","className","src","process","alt","TileGroup","groupName","tileArray","map","tile","key","id","Homepage","zipcodeInput","isLoggedInState","zipcodeState","setZipcodeState","submitZipcode","undefined","length","console","log","type","placeholder","size","minLength","maxLength","onChange","e","target","value","getZipcodeInput","onKeyDown","onClick","data","events","groups","slugify","text","toString","toLowerCase","replace","Event","match","params","eventObj","find","event","handleJoinEvent","community","location","about","memberIds","member","i","organizer","SignIn","Form","Group","controlId","Label","Control","name","Button","variant","SignUp","as","Check","inline","label","groupObj","group","foundingDate","initiatives","initiative","blurb","About","Header","setIsLoggedInState","history","useHistory","checked","updateUserState","push","createBrowserHistory","App","useState","basename","exact","path","component","Boolean","window","hostname","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.620d7a79.chunk.js","sourcesContent":["import React from \"react\";\nimport { Link } from \"react-router-dom\";\n\n\nconst Tile = ({ title, date, imgSrc, toUrl, eventId }) => {\n  return (\n    <Link to={ (toUrl ? toUrl : \"\") + \"/\" + (eventId ? eventId : \"\") }>\n      <div className=\"tile\">\n        <div className=\"tileImage\">\n          <img src={process.env.PUBLIC_URL + imgSrc} alt={title} />\n        </div>\n        <div className=\"tileText\">\n          <div className=\"tileTitle\">{title}</div>\n          <div className=\"tileDate\">{date}</div>\n        </div>\n      </div>\n    </Link>\n  );\n};\n\nexport default Tile;\n","import React from \"react\";\nimport Tile from \"./Tile\";\nimport \"./TileGroup.scss\";\n\nconst TileGroup = ({ groupName, tileArray }) => {\n  return (\n    <div className=\"tileGroup\">\n      <div className=\"tileGroupTitle\">{groupName}</div>\n      <div className=\"tiles\">\n        {tileArray.map((tile) => (\n          <Tile\n            title={tile.title}\n            key={tile.title + tile.id}\n            date={tile.date}\n            imgSrc={tile.imgSrc}\n            toUrl={tile.toUrl}\n            eventId={tile.id}\n          />\n        ))}\n      </div>\n      <button className=\"showMoreButton\">Show more</button>\n    </div>\n  );\n};\n\nexport default TileGroup;\n","import React from \"react\";\n\nimport \"./Homepage.scss\";\nimport data from \"../data/dummyData.json\";\n\nimport TileGroup from \"../components/TileGroup\";\n\nconst Homepage = ({ isLoggedInState, zipcodeState, setZipcodeState }) => {\n  let zipcodeInput;\n  const getZipcodeInput = (e) => {\n    zipcodeInput = e.target.value;\n    console.log(zipcodeInput);\n  };\n  const submitZipcode = () => {\n    if (\n      zipcodeInput !== null &&\n      zipcodeInput !== undefined &&\n      zipcodeInput !== \"\"\n    ) {\n      if (zipcodeInput.length === 5 && +zipcodeInput < 99999) {\n        setZipcodeState(zipcodeInput);\n      }\n    } else {\n      console.log(\"not a valid zipcode\");\n    }\n  };\n\n  // fetch('http://ec2-54-193-65-86.us-west-1.compute.amazonaws.com:8000/api/events?format=json')\n  // .then(response => response.json())\n  // .then(data => console.log(data));\n\n  return (\n    <div className=\"page\">\n      <div className=\"homepage\">\n        <div className=\"intro\">\n          <h1>Engage with your community</h1>\n          <p>\n            Want to help but don’t know where to start? ThinkLocal is a platform\n            that makes civic engagement easier. Organize or find existing\n            organizations and causes in your community.\n          </p>\n          {zipcodeState || isLoggedInState ? (\n            <div />\n          ) : (\n            <div>\n              <div>\n                <input\n                  type=\"text\"\n                  placeholder=\"Enter your zipcode\"\n                  size={18}\n                  minLength={5}\n                  maxLength={5}\n                  onChange={(e) => getZipcodeInput(e)}\n                  onKeyDown={(e) => {\n                    if (e.key === \"Enter\") {\n                      submitZipcode();\n                    }\n                  }}\n                />\n              </div>\n              <button className=\"cta\" onClick={() => submitZipcode()}>\n                Start helping\n              </button>\n            </div>\n          )}\n        </div>\n        <TileGroup\n          groupName={\n            (zipcodeState || isLoggedInState ? \"Local \" : \"\") + \"Events\"\n          }\n          tileArray={data.events}\n        />\n        <TileGroup\n          groupName={\n            (zipcodeState || isLoggedInState ? \"Local \" : \"\") + \"Groups\"\n          }\n          tileArray={data.groups}\n        />\n      </div>\n    </div>\n  );\n};\n\nexport default Homepage;\n","//convert to string for use in URL\n\nexport const slugify = (text) => {\n  return text\n    .toString()\n    .toLowerCase()\n    .replace(/\\s+/g, \"-\") // Replace spaces with -\n    .replace(/[^\\w\\-]+/g, \"\") // Remove all non-word chars\n    .replace(/\\-\\-+/g, \"-\") // Replace multiple - with single -\n    .replace(/^-+/, \"\") // Trim - from start of text\n    .replace(/-+$/, \"\"); // Trim - from end of text\n};\n","import React from \"react\";\nimport { Link } from \"react-router-dom\";\n\nimport \"./Event.scss\";\nimport data from \"../data/dummyData.json\";\nimport { slugify } from \"../slugify\";\n\nconst Event = (eventId) => {\n  let id = eventId.match.params.eventId;\n  let eventObj = data.events.find((event) => event.id === +id);\n\n  const handleJoinEvent = () => {\n    console.log(\"you joined the event\");\n  };\n\n  const handleShareEvent = () => {\n    console.log(\"share options\");\n  };\n\n  const handleShowMemberList = () => {\n    console.log(\"modal to show member list\");\n  };\n\n  return (\n    <div className=\"page\">\n      <div className=\"event\">\n        <div className=\"title\">{eventObj.title}</div>\n        <div className=\"community\">\n          by{\" \"}\n          <Link to={\"/group/\" + slugify(eventObj.community)}>\n            {eventObj.community}\n          </Link>\n        </div>\n        ˘\n        <div className=\"details\">\n          {\" \"}\n          {eventObj.date} at {eventObj.location}\n        </div>\n        <div className=\"callToAction\">\n          <button onClick={() => handleJoinEvent()}>Join</button>\n          <button onClick={() => handleShareEvent()}>Share</button>\n        </div>\n        <div className=\"mainImage\">\n          <img src={process.env.PUBLIC_URL + eventObj.imgSrc} alt=\"event header\" />\n        </div>\n        <div className=\"eventInfo\">\n          <div className=\"eventAbout\">\n            <h4>About the Event</h4>\n            <p>{eventObj.about}</p>\n          </div>\n          <div className=\"attending\">\n            <h4>Members Joined</h4>\n            {eventObj.memberIds.map((member, i) => {\n              if (i < 3) {\n                return (\n                  <div className=\"member\" key={member}>\n                    <div className=\"memberImg\"></div>\n                    {member}\n                  </div>\n                );\n              } else {\n                return (\n                  <div\n                    className=\"showMemberList\"\n                    key=\"showMemberList\"\n                    onClick={() => handleShowMemberList()}\n                  >\n                    + {eventObj.memberIds.length - 3} others\n                  </div>\n                );\n              }\n            })}\n            {/* May need to have user ids, and then query them to get the image and names? */}\n          </div>\n        </div>\n        <div className=\"member\">\n          <div className=\"organizerImg\"></div>\n          {eventObj.organizer} from {eventObj.community}\n        </div>\n        {/* May need to have user ids, and then query them to get the image and names? */}\n        <div className=\"callToAction\">\n          <button onClick={() => handleJoinEvent()}>Attend</button>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default Event;\n","import React from \"react\";\nimport { Link } from \"react-router-dom\";\n\nimport \"./SignInSignUp.scss\";\n\nimport Form from \"react-bootstrap/Form\";\nimport Button from \"react-bootstrap/Button\";\n\nconst SignIn = () => {\n  // const [loginInfoState, setLoginInfoState] = useState({\n  //   email: null,\n  //   password: null,\n  // });\n\n  // const handleInput = (e) => {\n  //   setLoginInfoState({\n  //     ...loginInfoState,\n  //     [e.target.name]: e.target.value,\n  //   });\n  // };\n\n  return (\n    <div className=\"signin\">\n      <h1>Sign In</h1>\n\n      <p>\n        (or <Link to=\"/signup\">create an account!</Link>)\n      </p>\n\n      <Form>\n        <Form.Group controlId=\"formBasicEmail\">\n          <Form.Label>Email address</Form.Label>\n          <Form.Control\n            type=\"email\"\n            name=\"email\"\n            placeholder=\"\"\n            //  onChange={(e) => handleInput(e)}\n          />\n        </Form.Group>\n\n        <Form.Group controlId=\"formBasicPassword\">\n          <Form.Label>Password</Form.Label>\n          <Form.Control\n            type=\"password\"\n            name=\"password\"\n            placeholder=\"\"\n            // onChange={(e) => handleInput(e)}\n          />\n        </Form.Group>\n        <Button variant=\"primary\" type=\"submit\">\n          Sign In\n        </Button>\n      </Form>\n    </div>\n  );\n};\n\nexport default SignIn;\n","import React from \"react\";\nimport { Link } from \"react-router-dom\";\nimport \"./SignInSignUp.scss\";\n\nimport Form from \"react-bootstrap/Form\";\nimport Button from \"react-bootstrap/Button\";\n\nconst SignUp = () => {\n  return (\n    <div className=\"signup\">\n      <h1>Sign Up</h1>\n\n      <p>\n        (or <Link to=\"/signin\">log into your account!</Link>)\n      </p>\n\n      <Form>\n        <Form.Group controlId=\"formBasicEmail\">\n          <Form.Label>Email address</Form.Label>\n          <Form.Control type=\"email\" placeholder=\"\" />\n        </Form.Group>\n\n        <Form.Group controlId=\"formBasicPassword\">\n          <Form.Label>Password</Form.Label>\n          <Form.Control type=\"password\" placeholder=\"\" />\n        </Form.Group>\n\n        <Form.Group controlId=\"formGridZip\">\n          <Form.Label>Zip</Form.Label>\n          <Form.Control />\n        </Form.Group>\n\n        <Form.Group controlId=\"formGridWhyJoin\">\n          <Form.Label>What's your primary reason for joining?</Form.Label>\n          <Form.Control as=\"select\">\n            <option>...</option>\n            <option>To help with existing efforts in my community</option>\n            <option>To organize people within my community</option>\n            <option>Not sure/Just want to check things out</option>\n          </Form.Control>\n        </Form.Group>\n\n        <Form.Group controlId=\"formInterests\">\n          <Form.Label>\n            I'm interested in getting involved with the following:{\" \"}\n          </Form.Label>\n          {[\"checkbox\"].map((type) => (\n            <div key={`inline-${type}-1`} className=\"checkboxes\">\n              <Form.Check\n                inline\n                label=\"COVID-19 Help\"\n                type={type}\n                id={`inline-${type}-1`}\n              />\n              <Form.Check\n                inline\n                label=\"Environment\"\n                type={type}\n                id={`inline-${type}-2`}\n              />\n              <Form.Check\n                inline\n                label=\"Local politcs\"\n                type={type}\n                id={`inline-${type}-1`}\n              />\n              <Form.Check\n                inline\n                label=\"Housing\"\n                type={type}\n                id={`inline-${type}-2`}\n              />\n              <Form.Check\n                inline\n                label=\"Other\"\n                type={type}\n                id={`inline-${type}-1`}\n              />\n            </div>\n          ))}\n        </Form.Group>\n\n        <Button variant=\"primary\" type=\"submit\">\n          Sign Up\n        </Button>\n      </Form>\n    </div>\n  );\n};\n\nexport default SignUp;\n","import React from \"react\";\nimport { Link } from \"react-router-dom\";\n\nimport \"./Group.scss\";\nimport data from \"../data/dummyData.json\";\nimport { slugify } from \"../slugify\";\n\nconst Group = (name) => {\n  //need view for admin/organizer\n  let title = name.match.params.name;\n  let groupObj = data.groups.find((group) => slugify(group.title) === title);\n\n  return (\n    <div className=\"page\">\n      <div className=\"group\">\n        <div className=\"title\">{groupObj.title}</div>\n        <div className=\"foundingDate\">\n          Group created on {groupObj.foundingDate}\n        </div>\n        <div className=\"aboutGroup\">{groupObj.about}</div>\n        {groupObj.initiatives.map((initiative) => (\n          <div className=\"initiative\" key={initiative.title}>\n            <Link\n              to={\n                \"/group/\" +\n                slugify(groupObj.title) +\n                \"/\" +\n                slugify(initiative.title)\n              }\n            >\n              <div className=\"initativeImg\">\n                <img\n                  src={process.env.PUBLIC_URL + initiative.imgSrc}\n                  alt=\"initative header\"\n                />\n              </div>\n              <div className=\"initiativeInfo\">\n                <div className=\"initiativeTitle\">{initiative.title}</div>\n                {initiative.blurb}\n              </div>\n            </Link>\n          </div>\n        ))}\n      </div>\n    </div>\n  );\n};\n\nexport default Group;\n","import React from \"react\";\nimport './About.scss';\n\nconst About = () => {\n  return (\n    <div className=\"about\">\n      <h1>About ThinkLocal</h1>\n\n      <h2>What is ThinkLocal?</h2>\n      <p>\n        ThinkLocal is a web app that allows community organizers to publish\n        politically-oriented social events and alert community members on how to\n        take further action. It allows for a low barrier of entry to civic\n        engagement practice that feels intuitive and socially rewarding.\n      </p>\n      <h2>Our Mission</h2>\n      <h2>Community Guidelines</h2>\n    </div>\n  );\n};\n\nexport default About;\n","import React from \"react\";\nimport { Link, useHistory } from \"react-router-dom\";\nimport \"./Header.scss\";\n\n// user states for: signed in, not signed it\n// { userLoggedIn }\nconst Header = ({ isLoggedInState, setIsLoggedInState }) => {\n  const updateUserState = (e) => {\n    setIsLoggedInState(e.target.checked);\n  };\n  const history = useHistory();\n  return (\n    <div className=\"header\">\n      <div className=\"logo\">\n        <Link to=\"/\">ThinkLocal</Link>\n      </div>\n\n      <div>\n        toggle log in\n        <input\n          type=\"checkbox\"\n          checked={isLoggedInState}\n          onChange={(e) => updateUserState(e)}\n        />\n      </div>\n\n      {isLoggedInState ? (\n        <div className=\"userActions\">\n          <Link to=\"/startgroup\">+ Start a group</Link>\n          <Link to=\"/groups\">Your groups</Link>\n          <Link to=\"/profile\">Profile</Link>\n          <Link to=\"/\">Log out</Link>\n        </div>\n      ) : (\n        <div className=\"userActions\">\n          <Link to=\"/about\">About ThinkLocal</Link>\n          <button\n            onClick={() => {\n              history.push(\"/signin\");\n            }}\n          >\n            Sign In / Sign Up\n          </button>\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default Header;\n","import React, { useState } from \"react\";\nimport { BrowserRouter as Router, Route, Switch } from \"react-router-dom\";\nimport { createBrowserHistory } from \"history\";\n\nimport Homepage from \"./pages/Homepage\";\nimport Event from \"./pages/Event\";\nimport SignIn from \"./pages/SignIn\";\nimport SignUp from \"./pages/SignUp\";\nimport Group from \"./pages/Group\";\nimport About from \"./pages/About\";\n\nimport Header from \"./components/Header\";\n\nimport \"./App.scss\";\n\nconst history = createBrowserHistory();\n\nfunction App() {\n  const [isLoggedInState, setIsLoggedInState] = useState(false);\n\n  const [zipcodeState, setZipcodeState] = useState(null);\n\n  return (\n    <>\n      <Router history={history} basename=\"/demo\">\n          <Header\n            isLoggedInState={isLoggedInState}\n            setIsLoggedInState={setIsLoggedInState}\n          />\n          <Switch>\n            <Route\n              exact\n              path=\"/\"\n              component={() => (\n                <Homepage\n                  isLoggedInState={isLoggedInState}\n                  zipcodeState={zipcodeState}\n                  setZipcodeState={setZipcodeState}\n                />\n              )}\n            />\n            <Route exact path=\"/about\" component={About} />\n            <Route exact path=\"/signin\" component={SignIn} />\n            <Route exact path=\"/signup\" component={SignUp} />\n            <Route exact path=\"/event/:eventId\" component={Event} />\n            <Route exact path=\"/group/:name\" component={Group} />\n          </Switch>\n      </Router>\n    </>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}