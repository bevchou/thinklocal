{"version":3,"sources":["UserContext.js","components/Tile.js","components/GroupTile.js","components/TileGroup.js","pages/Homepage.js","components/ShareModal.js","components/JoinModal.js","pages/Event.js","pages/SignIn.js","pages/SignUp.js","slugify.js","pages/Group.js","pages/About.js","pages/StartGroup.js","components/Header.js","App.js","serviceWorker.js","index.js"],"names":["UserContext","createContext","Tile","title","date","imgSrc","toUrl","eventId","to","className","src","alt","GroupTile","groupId","TileGroup","groupName","tileArray","type","includes","map","tile","event_title","key","id","event_date","group_name","Homepage","zipcodeInput","zipcodeState","setZipcodeState","useState","events","setEvents","groups","setGroups","groupsLoading","setGroupsLoading","eventsLoading","setEventsLoading","useContext","isLoggedInState","fetchEvents","setIsLoggedInState","user","setUser","a","fetch","apiCall","json","console","log","fetchGroups","useEffect","submitZipcode","undefined","length","placeholder","size","minLength","maxLength","onChange","e","target","value","getZipcodeInput","onKeyDown","onClick","ShareModal","linksToShare","setModalState","link","name","url","window","open","JoinModal","Event","parseInt","match","params","eventObj","setEvent","eventLoading","setEventLoading","group","setGroup","groupLoading","setGroupLoading","eventCreator","setEventCreator","eventCreatorLoading","setEventCreatorLoading","attendee","setAttendee","attendeeLoading","setAttendeeLoading","modalState","history","useHistory","fetchAttendeeList","options","method","headers","body","JSON","stringify","attendeeCall","attendeeList","users","fetchInfo","event","groupCall","event_creator","creatorCall","handleJoinEvent","eventUserInfo","then","response","ok","Error","push","shareLinks","Date","parse","toLocaleString","event_description","member","i","memberIds","user_name","SignIn","email","password","loginInfoState","setLoginInfoState","handleInput","handleSubmit","preventDefault","status","responseBody","Cookies","set","expires","Form","onSubmit","Group","controlId","Label","Control","Button","variant","SignUp","zipcode","join_reason","interests","covid","environment","local_politics","housing","other","formState","setFormState","handleCheckbox","checked","data","catch","error","as","Check","inline","label","slugify","text","toString","toLowerCase","replace","groupObj","setGroupInitatives","initativeLoading","setIntativeLoading","initiatives","create_date","about","alert","initiative","fields","topNeeds","need","linkToCommunityGuidelines","About","StartGroup","description","groupFormState","setGroupFormState","now","toISOString","creator","pk","create_by","Header","remove","handleLogout","createBrowserHistory","App","userCookie","get","isCookieSet","userObj","providerValue","useMemo","basename","Provider","exact","path","component","Boolean","location","hostname","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","message"],"mappings":"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","file":"static/js/main.d2fc3328.chunk.js","sourcesContent":["import { createContext } from 'react';\n\nexport const UserContext = createContext(null);","import React from \"react\";\nimport { Link } from \"react-router-dom\";\n\n\nconst Tile = ({ title, date, imgSrc, toUrl, eventId }) => {\n  return (\n    <Link to={ (toUrl ? toUrl : \"\") + \"/\" + (eventId ? eventId : \"\") }>\n      <div className=\"tile\">\n        <div className=\"tileImage\">\n          {/* <img src={process.env.PUBLIC_URL + imgSrc} alt={title} /> */}\n          <img src={imgSrc} alt={title} />\n        </div>\n        <div className=\"tileText\">\n          <div className=\"tileTitle\">{title}</div>\n          <div className=\"tileDate\">{date}</div>\n        </div>\n      </div>\n    </Link>\n  );\n};\n\nexport default Tile;\n","import React from \"react\";\nimport { Link } from \"react-router-dom\";\n\n\nconst GroupTile = ({ title, imgSrc, toUrl, groupId }) => {\n  return (\n    <Link to={ (toUrl ? toUrl : \"\") + \"/\" + (groupId ? groupId : \"\") }>\n      <div className=\"tile\">\n        <div className=\"tileImage\">\n          {/* <img src={process.env.PUBLIC_URL + imgSrc} alt={title} /> */}\n          <img src={imgSrc} alt={title} />\n        </div>\n        <div className=\"tileText\">\n          <div className=\"tileTitle\">{title}</div>\n        </div>\n      </div>\n    </Link>\n  );\n};\n\nexport default GroupTile;\n","import React from \"react\";\nimport Tile from \"./Tile\";\nimport GroupTile from \"./GroupTile\";\nimport \"./TileGroup.scss\";\n\nconst TileGroup = ({ groupName, tileArray }) => {\n  const type = groupName.includes(\"Events\") ? \"events\" : \"groups\";\n  \n  return (\n    <div className=\"tileGroup\">\n      <div className=\"tileGroupTitle\">{groupName}</div>\n      <div className=\"tiles\">\n        { type === \"events\" && \n          tileArray.map((tile) => \n            <Tile\n            title={tile.event_title}\n            key={tile.event_title + tile.id}\n            date={tile.event_date}\n            imgSrc= {\"https://picsum.photos/200\"}\n            toUrl={\"/event\"}\n            eventId={tile.id}\n          />)\n        }\n        { type === \"groups\" && \n          tileArray.map((tile) => \n            <GroupTile\n            title={tile.group_name}\n            key={tile.group_name + tile.id}\n            imgSrc= {\"https://picsum.photos/200\"}\n            toUrl={\"/group\"}\n            groupId={tile.id}\n          />)\n        }\n      </div>\n      <button className=\"showMoreButton\">Show more</button>\n    </div>\n  );\n};\n\nexport default TileGroup;","import React, {useState, useEffect, useContext} from \"react\";\nimport { UserContext } from \"../UserContext\";\n\nimport \"./Homepage.scss\";\n// import data from \"../data/dummyData.json\";\nimport TileGroup from \"../components/TileGroup\";\n\nconst Homepage = ({zipcodeState, setZipcodeState }) => {\n  let zipcodeInput;\n  const [events, setEvents] = useState([]);\n  const [groups, setGroups] = useState([]);\n  const [groupsLoading, setGroupsLoading] = useState(true);\n  const [eventsLoading, setEventsLoading] = useState(true);\n\n  const {isLoggedInState, setIsLoggedInState, user, setUser} = useContext(UserContext);\n\n  const fetchEvents = async () => {\n    const apiCall = await fetch('https://thinklocal-ec2-alb-2033741287.us-west-1.elb.amazonaws.com/api/events?format=json');\n    const events = await apiCall.json();\n    setEvents(events);\n    setEventsLoading(false);\n    console.log(events);\n  }\n\n  const fetchGroups = async () =>{\n    const apiCall = await fetch('https://thinklocal-ec2-alb-2033741287.us-west-1.elb.amazonaws.com/api/groups?format=json');\n    const groups = await apiCall.json();\n    setGroups(groups);\n    setGroupsLoading(false);\n    console.log(groups);\n  }\n\n  useEffect(() => {\n    fetchEvents();\n    fetchGroups();\n  }, []);\n  \n  const getZipcodeInput = (e) => {\n    zipcodeInput = e.target.value;\n    console.log(zipcodeInput);\n  };\n  const submitZipcode = () => {\n    if (\n      zipcodeInput !== null &&\n      zipcodeInput !== undefined &&\n      zipcodeInput !== \"\"\n    ) {\n      if (zipcodeInput.length === 5 && +zipcodeInput < 99999) {\n        setZipcodeState(zipcodeInput);\n      }\n    } else {\n      console.log(\"not a valid zipcode\");\n    }\n  };\n\n  if( eventsLoading === true || groupsLoading === true){\n    return(<div>Loading</div>)\n  }\n\n  return (\n    <div className=\"page\">\n      <div className=\"homepage\">\n        <div className=\"intro\">\n          <h1>Engage with your community</h1>\n          <p>\n            Want to help but don’t know where to start? ThinkLocal is a platform\n            that makes civic engagement easier. Organize or find existing\n            organizations and causes in your community.\n            {console.log(\"UserContext\", UserContext)\n            }\n          </p>\n          {zipcodeState || isLoggedInState ? (\n            <div />\n          ) : (\n            <div>\n              <div>\n                <input\n                  type=\"text\"\n                  placeholder=\"Enter your zipcode\"\n                  size={18}\n                  minLength={5}\n                  maxLength={5}\n                  onChange={(e) => getZipcodeInput(e)}\n                  onKeyDown={(e) => {\n                    if (e.key === \"Enter\") {\n                      submitZipcode();\n                    }\n                  }}\n                />\n              </div>\n              <button className=\"cta\" onClick={() => submitZipcode()}>\n                Start helping\n              </button>\n            </div>\n          )}\n        </div>\n        <TileGroup\n          groupName={\n            (zipcodeState || isLoggedInState ? \"Local \" : \"\") + \"Events\"\n          }\n          tileArray={events}\n        />\n        <TileGroup\n          groupName={\n            (zipcodeState || isLoggedInState ? \"Local \" : \"\") + \"Groups\"\n          }\n          tileArray={groups}\n        />\n      </div>\n    </div>\n  );\n};\n\nexport default Homepage;\n","import React from \"react\";\nimport \"./Modals.scss\";\n\nconst ShareModal = ({ linksToShare, setModalState }) => {\n  const openLink = (url) => {\n    window.open(url);\n  };\n  return (\n    <div className=\"modal\">\n      {/* set modal to null to close out of it */}\n      <div className=\"exitModal\" onClick={() => setModalState(null)}>\n        X\n      </div>\n      <h2>Share this event!</h2>\n      <div className=\"shareButtons\">\n        {linksToShare && linksToShare.length > 0\n          ? linksToShare.map((link) => (\n              <button key={link.name} onClick={() => openLink(link.url)}>\n                {link.name}\n              </button>\n            ))\n          : \"The organizer of this event has not added any links yet ):\"}\n      </div>\n    </div>\n  );\n};\n\nexport default ShareModal;\n","import React from \"react\";\n\nimport \"./Modals.scss\";\n\nconst JoinModal = ({ setModalState }) => {\n  const addToCal = () => {\n    console.log(\"add to calendar\");\n  };\n\n  return (\n    <div className=\"modal\">\n      {/* set modal to null to close out of it */}\n      <div className=\"exitModal\" onClick={() => setModalState(null)}>\n        X\n      </div>\n\n      <h2>Thanks for signing up!</h2>\n\n      <div className=\"buttonPair\">\n      <button onClick={() => addToCal()}>Add to calendar</button>\n      <button onClick={() => setModalState(\"share\")}>Share with friends</button>\n      </div>\n    </div>\n  );\n};\n\nexport default JoinModal;\n","import React, {useState, useEffect, useContext} from \"react\";\nimport { Link, useHistory } from \"react-router-dom\";\nimport { UserContext } from \"../UserContext\";\n\nimport \"./Event.scss\";\n// import data from \"../data/dummyData.json\";\n// import { slugify } from \"../slugify\";\n\nimport ShareModal from \"../components/ShareModal\";\nimport JoinModal from \"../components/JoinModal\";\n\nconst Event = (eventId) => {\n  let id = parseInt(eventId.match.params.eventId);\n  // let eventObj = data.events.find((event) => event.id === +id);\n  const [eventObj, setEvent] = useState([]);\n  const [eventLoading, setEventLoading] = useState(true);\n  const [group, setGroup] = useState('');\n  const [groupLoading, setGroupLoading] = useState(true);\n  const [eventCreator, setEventCreator] = useState('');\n  const [eventCreatorLoading, setEventCreatorLoading] = useState(true);\n  const [attendee, setAttendee] = useState([]);\n  const [attendeeLoading, setAttendeeLoading] = useState(true);\n\n  const [modalState, setModalState] = useState(null);\n\n  const {isLoggedInState, user} = useContext(UserContext);\n  const history = useHistory();\n\n  const fetchAttendeeList = async () =>{\n    const options = {\n      method: \"POST\",\n      headers: {\n        \"Accept\": \"application/json, text/plain, */*\",\n        \"Content-Type\": \"application/json\",\n      },\n      body: JSON.stringify({\"eventId\": id})\n    }\n    const attendeeCall = await fetch('https://thinklocal-ec2-alb-2033741287.us-west-1.elb.amazonaws.com/api/attendees/getAttendeeInfo/', options);\n    //TODO: getting the whole list, need to improve this\n    const attendeeList = await attendeeCall.json();\n    setAttendee(attendeeList.users);\n    setAttendeeLoading(false);\n    console.log(attendee);\n    console.log(attendeeList.users);\n  }\n\n  const fetchInfo = async () => {\n\n    const apiCall = await fetch('https://thinklocal-ec2-alb-2033741287.us-west-1.elb.amazonaws.com/api/events/'+id);\n    const event = await apiCall.json();\n    const groupCall = await fetch('https://thinklocal-ec2-alb-2033741287.us-west-1.elb.amazonaws.com/api/groups/'+event.group);\n    const group = await groupCall.json();\n    const creatorCall = await fetch('https://thinklocal-ec2-alb-2033741287.us-west-1.elb.amazonaws.com/api/users/'+event.event_creator);\n    const eventCreator = await creatorCall.json();\n\n    fetchAttendeeList();\n\n    setGroup(group);\n    setGroupLoading(false);\n\n    setEvent(event);\n    setEventLoading(false);\n\n    setEventCreator(eventCreator);\n    setEventCreatorLoading(false);\n  }\n\n  useEffect(() => {\n    fetchInfo();\n  }, []);\n\n  if( eventLoading === true || groupLoading === true \n    || eventCreatorLoading === true || attendeeLoading === true){\n    return(<div>Loading</div>)\n  }\n\n  const handleJoinEvent = async () => {\n    if(isLoggedInState){\n      // const userJson = JSON.parse(user);\n      // const eventUserInfo = {\n      //   \"event\": id,\n      //   \"user\": userJson.pk\n      // }\n      const eventUserInfo = {\n        \"event\": id,\n        \"user\": user.id\n      }\n      console.log(eventUserInfo);\n      await fetch(\"https://thinklocal-ec2-alb-2033741287.us-west-1.elb.amazonaws.com/api/attendees/\",\n      {\n        method: \"POST\",\n        headers: {\n          \"Accept\": \"application/json, text/plain, */*\",\n          \"Content-Type\": \"application/json\"\n        },\n        body: JSON.stringify(eventUserInfo),\n      })\n      .then((response) => {\n        if(response.ok){\n          return response.json();\n        }else{\n          throw new Error(\"something went wrong\");\n        }\n      });\n    }else{\n      history.push(\"/Signin\");\n    }\n    fetchAttendeeList();\n  };\n\n  const handleShareEvent = () => {\n    console.log(\"share options\");\n    setModalState(\"share\");\n  };\n\n  const handleShowMemberList = () => {\n    console.log(\"modal to show member list\");\n  };\n  \n  return (\n    <div className=\"page\">\n      {modalState === \"share\" ? <ShareModal linksToShare={eventObj.shareLinks} setModalState={setModalState}/> : null}\n      {modalState === \"join\" ? <JoinModal setModalState={setModalState}/> : null}\n\n      <div className=\"event\">\n        <div className=\"title\">{eventObj.event_title}</div>\n        <div className=\"community\">\n          by{\" \"}\n          {/* <Link to={\"/group/\" + slugify(eventObj.group)}> */}\n          <Link to={\"/group/\"+ eventObj.group}>\n            {group.group_name}\n          </Link>\n        </div>\n        \n        <div className=\"details\">\n          {\" \"}\n          {new Date(Date.parse(eventObj.event_date)).toLocaleString()} \n          {/* at {eventObj.location} */}\n        </div>\n        <div className=\"callToAction\">\n          <button onClick={() => handleJoinEvent()}>Join</button>\n          <button onClick={() => handleShareEvent()}>Share</button>\n        </div>\n        <div className=\"mainImage\">\n          <img\n            // src={process.env.PUBLIC_URL + eventObj.imgSrc}\n            src={\"https://picsum.photos/800\"}\n            alt=\"event header\"\n          />\n        </div>\n        <div className=\"eventInfo\">\n          <div className=\"eventAbout\">\n            <h4>About the Event</h4>\n            <p>{eventObj.event_description}</p>\n          </div>\n          <div className=\"attending\">\n            <h4>Members Joined</h4>\n             {attendee.map((member, i) => {\n              if (i < 3) {\n                return (\n                  <div className=\"member\" key={member.id}>\n                    <div className=\"memberImg\"></div>\n                    {member}\n                  </div>\n                );\n              } else if (i === 3) {\n                return (\n                  <div\n                    className=\"showMemberList\"\n                    key=\"showMemberList\"\n                    onClick={() => handleShowMemberList()}\n                  >\n                    + {eventObj.memberIds.length - 3} others\n                  </div>\n                );\n              } else {\n                return null;\n              }\n            })}\n          </div>\n        </div>\n        <div className=\"member\">\n          <div className=\"organizerImg\"></div>\n          {eventCreator.user_name} from {group.group_name}\n        </div>\n        {/* May need to have user ids, and then query them to get the image and names? */}\n        <div className=\"callToAction\">\n          <button onClick={() => handleJoinEvent()}>Attend</button>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default Event;\n","import React, { useState, useContext} from \"react\";\nimport { Link, useHistory } from \"react-router-dom\";\nimport { UserContext } from \"../UserContext\";\nimport Cookies from 'js-cookie';\n\nimport \"./SignInSignUp.scss\";\n\nimport Form from \"react-bootstrap/Form\";\nimport Button from \"react-bootstrap/Button\";\n\nconst SignIn = () => {\n  const [loginInfoState, setLoginInfoState] = useState({\n    email: null,\n    password: null,\n  });\n\n  const {setIsLoggedInState, setUser} = useContext(UserContext);\n  const history = useHistory();\n\n  const handleInput = (e) => {\n    setLoginInfoState({\n      ...loginInfoState,\n      [e.target.name]: e.target.value,\n    });\n  };\n\n  const handleSubmit = async(e) => {\n    e.preventDefault();\n    let responseBody; \n    const options = {\n      method: \"POST\",\n      headers: {\n        \"Accept\": \"application/json, text/plain, */*\",\n        \"Content-Type\": \"application/json\",\n      },\n      body: JSON.stringify(loginInfoState)\n    }\n    //ADD CODE TO AUTHENTICATE\n    const loginCall = await fetch(\"https://thinklocal-ec2-alb-2033741287.us-west-1.elb.amazonaws.com/api/users/check_password/\",options)\n    .then((response) => {\n      console.log(response);\n      if(response.ok){\n        return response.json();\n      }else{\n        throw new Error(\"Error in authentication\")\n      }\n    })\n    .then(status => {\n      console.log(status);\n      responseBody = status\n    });\n\n    switch(responseBody.status){\n      case \"password does not match\":\n        console.log(responseBody);\n        break;\n      case \"password matches\":\n        console.log(responseBody);\n        //update the user state to loggedIn\n        setIsLoggedInState(true);\n        console.log(JSON.stringify(responseBody))\n        setUser(JSON.stringify(responseBody))\n        Cookies.set(\"thinklocal\", JSON.stringify(responseBody), { expires: 2 });\n        history.push(\"/\");\n        break;\n      default:\n        console.log(responseBody);\n    }\n  };\n\n  return (\n    <div className=\"signin\">\n      <h1>Sign In</h1>\n      <p>\n        (or <Link to=\"/signup\">create an account!</Link>)\n      </p>\n\n      <Form onSubmit={(e) => handleSubmit(e)}>\n        <Form.Group controlId=\"formBasicEmail\">\n          <Form.Label>Email address</Form.Label>\n          <Form.Control\n            type=\"email\"\n            name=\"email\"\n            placeholder=\"\"\n            onChange={(e) => handleInput(e)}\n          />\n        </Form.Group>\n\n        <Form.Group controlId=\"formBasicPassword\">\n          <Form.Label>Password</Form.Label>\n          <Form.Control\n            type=\"password\"\n            name=\"password\"\n            placeholder=\"\"\n            onChange={(e) => handleInput(e)}\n          />\n        </Form.Group>\n        <Button variant=\"primary\" type=\"submit\">\n          Sign In\n        </Button>\n      </Form>\n    </div>\n  );\n};\n\nexport default SignIn;\n","import React, { useState, useContext } from \"react\";\nimport { Link, useHistory } from \"react-router-dom\";\nimport { UserContext } from \"../UserContext\";\nimport Cookies from 'js-cookie';\n\nimport \"./SignInSignUp.scss\";\n\nimport Form from \"react-bootstrap/Form\";\nimport Button from \"react-bootstrap/Button\";\n\nconst SignUp = () => {\n\n  // NEED TO SWITCH TO FORM STATE STRUCTURE\n  const [formState, setFormState] = useState({\n    name: null,\n    email: null,\n    password: null,\n    zipcode: null,\n    join_reason: null,\n    interests: {\n      covid: false,\n      environment: false,\n      local_politics: false,\n      housing: false,\n      other: false,\n    },\n  });\n\n  const history = useHistory();\n  const {setIsLoggedInState, setUser} = useContext(UserContext);\n\n  const handleInput = (e) => {\n    setFormState({\n      ...formState,\n      [e.target.name]: e.target.value,\n    });\n  };\n\n  const handleCheckbox = (e) => {\n    setFormState({\n      ...formState,\n      interests: {\n        ...formState.interests,\n        [e.target.name]: e.target.checked,\n      },\n    });\n  };\n\n  const handleSubmit = (e) => {\n    e.preventDefault();\n    // POST new user data\n    fetch(\n      // \"https://thinklocal-ec2-alb-2033741287.us-west-1.elb.amazonaws.com/api/users/\",\n      \"https://thinklocal-ec2-alb-2033741287.us-west-1.elb.amazonaws.com/api/users/\",\n      {\n        method: \"POST\",\n        headers: {\n          \"Accept\": \"application/json, text/plain, */*\",\n          \"Content-Type\": \"application/json\",\n        },\n        body: JSON.stringify(formState),\n      }\n    )\n      .then((response) => {\n        console.log(response)\n          if(response.ok){\n            return response.json();\n          }else{\n            throw new Error(\"something went wrong\");\n          }\n        }\n      )\n      .then((data) => {\n        console.log(\"Success:\", data);\n        setIsLoggedInState(true);\n        setUser(JSON.stringify(data))\n        Cookies.set(\"thinklocal\", JSON.stringify(data), { expires: 2 });\n\n        history.push(\"/\");\n      })\n      .catch((error) => {\n        console.error(\"Error:\", error);\n      });\n    \n      //get the user list to determine user id\n    // fetch(\n    //   // \"https://thinklocal-ec2-alb-2033741287.us-west-1.elb.amazonaws.com/api/users?format=json\"\n    //   \"http://localhost:8000/api/users/\"\n    // )\n    //   .then((response) => response.json())\n    //   .then((userList) => {\n    //     setFormState({\n    //       ...formState,\n    //       id: userList.length,\n    //     });\n\n    //     // POST new user data\n    //     fetch(\n    //       // \"https://thinklocal-ec2-alb-2033741287.us-west-1.elb.amazonaws.com/api/users/\",\n    //       \"http://localhost:8000/api/users/\",\n    //       {\n    //         method: \"POST\",\n    //         headers: {\n    //           \"Accept\": \"application/json, text/plain, */*\",\n    //           \"Content-Type\": \"application/json\",\n    //         },\n    //         body: JSON.stringify(formState),\n    //       }\n    //     )\n    //       .then((response) => {\n    //         console.log(response)\n    //           if(response.ok){\n    //             return response.json();\n    //           }else{\n    //             throw new Error(\"something went wrong\");\n    //           }\n    //         }\n    //       )\n    //       .then((data) => {\n    //         console.log(\"Success:\", data);\n    //       })\n    //       .catch((error) => {\n    //         console.error(\"Error:\", error);\n    //       });\n    //   });\n  };\n\n  return (\n    <div className=\"signup\">\n      <h1>Sign Up</h1>\n\n      <p>\n        (or <Link to=\"/signin\">log into your account!</Link>)\n      </p>\n\n      <Form onSubmit={(e) => handleSubmit(e)}>\n        <Form.Group controlId=\"formName\">\n          <Form.Label>Name</Form.Label>\n          <Form.Control name=\"user_name\" onChange={(e) => handleInput(e)} />\n        </Form.Group>\n\n        <Form.Group controlId=\"formBasicEmail\">\n          <Form.Label>Email address</Form.Label>\n          <Form.Control\n            name=\"email\"\n            type=\"email\"\n            placeholder=\"\"\n            onChange={(e) => handleInput(e)}\n          />\n        </Form.Group>\n\n        <Form.Group controlId=\"formBasicPassword\">\n          <Form.Label>Password</Form.Label>\n          <Form.Control\n            name=\"password\"\n            type=\"password\"\n            placeholder=\"\"\n            onChange={(e) => handleInput(e)}\n          />\n        </Form.Group>\n\n        <Form.Group controlId=\"formZip\">\n          <Form.Label>Zip Code</Form.Label>\n          <Form.Control name=\"zipcode\" onChange={(e) => handleInput(e)} />\n        </Form.Group>\n\n        <Form.Group controlId=\"formWhyJoin\">\n          <Form.Label>What's your primary reason for joining?</Form.Label>\n          <Form.Control\n            as=\"select\"\n            name=\"join_reason\"\n            onChange={(e) => handleInput(e)}\n          >\n            <option>...</option>\n            <option>To help with existing efforts in my community</option>\n            <option>To organize people within my community</option>\n            <option>Not sure/Just want to check things out</option>\n          </Form.Control>\n        </Form.Group>\n\n        <Form.Group controlId=\"formInterests\">\n          <Form.Label>\n            I'm interested in getting involved with the following:\n          </Form.Label>\n          {[\"checkbox\"].map((type) => (\n            <div key={`interests-${type}`} className=\"checkboxes\">\n              <Form.Check\n                inline\n                label=\"COVID-19 Help\"\n                type={type}\n                id=\"covid\"\n                name=\"covid\"\n                onChange={(e) => handleCheckbox(e)}\n              />\n              <Form.Check\n                inline\n                label=\"Environment\"\n                type={type}\n                id=\"environment\"\n                name=\"environment\"\n                onChange={(e) => handleCheckbox(e)}\n              />\n              <Form.Check\n                inline\n                label=\"Local politcs\"\n                type={type}\n                id=\"local_politcs\"\n                name=\"local_politcs\"\n                onChange={(e) => handleCheckbox(e)}\n              />\n              <Form.Check\n                inline\n                label=\"Housing\"\n                type={type}\n                id=\"housing\"\n                name=\"housing\"\n                onChange={(e) => handleCheckbox(e)}\n              />\n              <Form.Check\n                inline\n                label=\"Other\"\n                type={type}\n                id=\"other\"\n                name=\"other\"\n                onChange={(e) => handleCheckbox(e)}\n              />\n            </div>\n          ))}\n        </Form.Group>\n\n        <Button variant=\"primary\" type=\"submit\">\n          Sign Up\n        </Button>\n      </Form>\n    </div>\n  );\n};\n\nexport default SignUp;\n","//convert to string for use in URL\n\nexport const slugify = (text) => {\n  return text\n    .toString()\n    .toLowerCase()\n    .replace(/\\s+/g, \"-\") // Replace spaces with -\n    .replace(/[^\\w\\-]+/g, \"\") // Remove all non-word chars\n    .replace(/\\-\\-+/g, \"-\") // Replace multiple - with single -\n    .replace(/^-+/, \"\") // Trim - from start of text\n    .replace(/-+$/, \"\"); // Trim - from end of text\n};\n","import React, { useState, useEffect } from \"react\";\nimport { Link } from \"react-router-dom\";\n\nimport \"./Group.scss\";\n// import data from \"../data/dummyData.json\";\nimport { slugify } from \"../slugify\";\n\nconst Group = (name) => {\n  //need view for admin,/organizer\n  let title = name.match.params.name;\n\n  // let groupObj = data.groups.find((group) => slugify(group.title) === title);\n  const [groupObj,setGroup] = useState([]);\n  const [groupInitatives, setGroupInitatives] = useState([]);\n  const [groupLoading, setGroupLoading] = useState(true);\n  const [initativeLoading, setIntativeLoading] = useState(true);\n\n  useEffect(() => {\n    fetch('https://thinklocal-ec2-alb-2033741287.us-west-1.elb.amazonaws.com/api/groups/'+title+'/?format=json')\n    .then(response => response.json())\n    .then(data => {\n      setGroup(data);\n      setGroupLoading(false);\n    })\n    .catch(error => console.error(error));\n  }, []);\n\n  const options = {\n    method: \"POST\",\n    headers: {\n      \"Accept\": \"application/json, text/plain, */*\",\n      \"Content-Type\": \"application/json\",\n    },\n    body: JSON.stringify({'groupId': title})\n  }\n  useEffect(() => {\n    fetch('https://thinklocal-ec2-alb-2033741287.us-west-1.elb.amazonaws.com/api/initiatives/getInitiatives/', options)\n    .then(response => response.json())\n    .then(data => {\n      console.log(\"data\",data);\n      if(data.status === 'found'){\n        setGroupInitatives(data.initiatives);\n      }\n      setIntativeLoading(false);\n    })\n    .catch(error => console.error(error));\n  }, []);\n\n  if( groupLoading === true || initativeLoading === true){\n    return(<div>Loading</div>)\n  }\n\n  return (\n    <div className=\"groupPage\">\n      <div className=\"groupSidebar\">\n        sidebar is here\n      </div>\n      <div className=\"group\">\n        <div className=\"title\">{groupObj.group_name}</div>\n        <div className=\"foundingDate\">\n          Group created on {new Date(Date.parse(groupObj.create_date)).toLocaleString()}\n        </div>\n        <div className=\"aboutGroup\">{groupObj.about}</div>\n\n        <div className=\"alertBox\">\n          <div className=\"alertTitle\">Alert!</div>\n          {groupObj.alert}\n        </div>\n\n        {groupObj.initiatives.map((initiative) => (\n          <div className=\"initiative\" key={initiative.title}>\n            <Link\n              to={\n                \"/group/\" +\n                slugify(groupObj.group_name) +\n                \"/\" +\n                slugify(initiative.fields.name)\n              }\n            >\n              <div className=\"initativeImg\">\n                <img\n                  // src={process.env.PUBLIC_URL + initiative.imgSrc}\n                  src={\"https://picsum.photos/800\"}\n                  alt=\"initative header\"\n                />\n              </div>\n              <div className=\"initiativeInfo\">\n                <div className=\"initiativeTitle\">{initiative.fields.name}</div>\n                  created on {new Date(Date.parse(initiative.fields.create_date)).toLocaleString()}\n              </div>\n            </Link>\n          </div>\n        ))}\n\n        <div className=\"additionalInfoBoxes\">\n          <div className=\"topNeeds\">\n            <div className=\"topNeedsTitle\">Top Needs</div>\n            <ul>\n              {groupObj.topNeeds.map((need) => (\n                <li key={need}>{need}</li>\n              ))}\n            </ul>\n          </div>\n          <div className=\"getStarted\" onClick={() => window.open(groupObj.linkToCommunityGuidelines)}>\n            <div className=\"getStartedTitle\">How to get started</div>\n            Community guidelines and onboarding\n          </div>\n        </div>\n\n        \n\n      </div>\n    </div>\n  );\n};\n\nexport default Group;","import React from \"react\";\nimport './About.scss';\n\nconst About = () => {\n  return (\n    <div className=\"about\">\n      <h1>About ThinkLocal</h1>\n\n      <h2>What is ThinkLocal?</h2>\n      <p>\n        ThinkLocal is a web app that allows community organizers to publish\n        politically-oriented social events and alert community members on how to\n        take further action. It allows for a low barrier of entry to civic\n        engagement practice that feels intuitive and socially rewarding.\n      </p>\n      <h2>Our Mission</h2>\n      <h2>Community Guidelines</h2>\n    </div>\n  );\n};\n\nexport default About;\n","import React, { useState, useContext } from \"react\";\nimport { Link, useHistory } from \"react-router-dom\";\nimport Cookies from 'js-cookie';\nimport { UserContext } from \"../UserContext\";\n\nimport \"./StartGroup.scss\";\n\nimport Form from \"react-bootstrap/Form\";\nimport Button from \"react-bootstrap/Button\";\n\nconst StartGroup = () => {\n  const {user} = useContext(UserContext);\n  const [groupFormState, setGroupFormState] = useState({\n      group_name: null,\n      description: null,\n  });\n  const history = useHistory();\n\n  const handleInput = (e) => {\n      setGroupFormState({\n          ...groupFormState,\n          [e.target.name]: e.target.value\n      })\n  }\n  const getTime = () => {\n    const time = new Date();\n    const now = time.toISOString();\n\n    return now;\n  }\n\n  const handleSubmit = (e) => {\n      e.preventDefault();\n      const now = getTime();\n      \n      const groupObj = {\n        ...groupFormState,\n        creator: user.pk,\n        create_by: user.fields.user_name,\n        create_date: now\n      }\n      console.log(\"form\", groupFormState);\n      console.log(\"groupObj\", groupObj);\n      console.log(user);\n      console.log(now);\n      const options = {\n        method: \"POST\",\n        headers: {\n          \"Accept\": \"application/json, text/plain, */*\",\n          \"Content-Type\": \"application/json\",\n        },\n        body: JSON.stringify(groupObj),\n      }\n      fetch(\"https://thinklocal-ec2-alb-2033741287.us-west-1.elb.amazonaws.com/api/groups/\", options)\n      .then((response) => {\n        console.log(response)\n          if(response.ok){\n            return response.json();\n          }else{\n            throw new Error(\"something went wrong\");\n          }\n        }\n      )\n      .then((data) => {\n        console.log(\"Success:\", data);\n        history.push(\"/groups\");\n      })\n      .catch((error) => {\n        console.error(\"Error:\", error);\n      });\n      \n      \n  }\n  return(\n    <div className=\"startgroup\">\n    <h1>Start Your Group</h1>\n  {/* <pre>{user.pk}{user.fields.user_name}</pre> */}\n\n    <Form onSubmit={(e) => handleSubmit(e)}>\n      <Form.Group controlId=\"formName\">\n        <Form.Label>Group Name</Form.Label>\n        <Form.Control name=\"group_name\" onChange={(e) => handleInput(e)} />\n      </Form.Group>\n\n      <Form.Group controlId=\"formDiscription\">\n        <Form.Label>Description</Form.Label>\n        <textarea\n          name=\"description\"\n          placeholder=\"\"\n          onChange={(e) => handleInput(e)}\n        />\n      </Form.Group>\n      <Button variant=\"primary\" type=\"submit\">\n          Submit\n      </Button>\n    </Form>\n    </div>\n    );\n};\n\nexport default StartGroup;","import React, { useContext } from \"react\";\nimport { Link, useHistory } from \"react-router-dom\";\nimport \"./Header.scss\";\nimport { UserContext } from \"../UserContext\";\nimport Cookies from 'js-cookie';\n\nconst Header = () => {\n  const updateUserState = (e) => {\n    setIsLoggedInState(e.target.checked);\n  };\n  const history = useHistory();\n  const {isLoggedInState, setIsLoggedInState, user, setUser} = useContext(UserContext);\n  \n  const handleLogout = (e) => {\n    e.preventDefault();\n    setUser(null);\n    setIsLoggedInState(false);\n    Cookies.remove(\"thinklocal\");\n    history.push(\"/\");\n  }\n  return (\n\n    <div className=\"header\">\n      <div className=\"logo\">\n        <Link to=\"/\">ThinkLocal</Link>\n      </div>\n\n      {isLoggedInState ? (\n        <div className=\"userActions\">\n          <Link to=\"/startgroup\">+ Start a group</Link>\n          <Link to=\"/groups\">Your groups</Link>\n          {/* <Link to=\"/profile\">Profile</Link> */}\n          <button\n            onClick={(e) => handleLogout(e)}>Log out</button>\n        </div>\n      ) : (\n        <div className=\"userActions\">\n          <Link to=\"/about\">About ThinkLocal</Link>\n          <button\n            onClick={() => {\n              history.push(\"/signin\");\n            }}\n          >\n            Sign In / Sign Up\n          </button>\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default Header;\n","import React, { useState, useMemo } from \"react\";\nimport { BrowserRouter as Router, Route, Switch } from \"react-router-dom\";\nimport { createBrowserHistory } from \"history\";\n\nimport Homepage from \"./pages/Homepage\";\nimport Event from \"./pages/Event\";\nimport SignIn from \"./pages/SignIn\";\nimport SignUp from \"./pages/SignUp\";\nimport Group from \"./pages/Group\";\nimport About from \"./pages/About\";\nimport StartGroup from \"./pages/StartGroup\";\n\nimport Header from \"./components/Header\";\nimport Cookies from 'js-cookie';\n\nimport { UserContext } from \"./UserContext\";\nimport \"./App.scss\";\n\nconst history = createBrowserHistory();\n\nfunction App() {\n  const userCookie = Cookies.get('thinklocal');\n  const isCookieSet = userCookie === undefined ? false : true;\n\n  const [isLoggedInState, setIsLoggedInState] = useState(isCookieSet);\n  const [zipcodeState, setZipcodeState] = useState(null);\n  const userObj = isCookieSet ? JSON.parse(userCookie) : null;\n  const [user, setUser] = useState(userObj);\n\n  const providerValue = useMemo(() => ({ \n    isLoggedInState, \n    setIsLoggedInState,\n    user,\n    setUser}), [isLoggedInState, setIsLoggedInState, user, setUser]);\n\n  return (\n    <>\n      <Router history={history} basename=\"/demo\">\n          <UserContext.Provider value={providerValue}>\n          <Header/>\n          <Switch>\n            <Route\n              exact\n              path=\"/\"\n              component={() => (\n                <Homepage\n                  zipcodeState={zipcodeState}\n                  setZipcodeState={setZipcodeState}\n                />\n              )}\n            />\n            <Route exact path=\"/about\" component={About} />\n            <Route exact path=\"/startgroup\" component={StartGroup} />\n            <Route \n              exact \n              path=\"/signin\" \n              component={SignIn} />\n            <Route exact path=\"/signup\" component={SignUp} />\n            <Route exact path=\"/event/:eventId\" component={Event} />\n            <Route exact path=\"/group/:name\" component={Group} />\n          </Switch>\n          </UserContext.Provider>\n      </Router>\n    </>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}